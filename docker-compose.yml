services:
  #--------------------------------#
  # Modern Kafka Stack (KRaft Mode)
  #--------------------------------#
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # --- KRaft Mode Configuration ---
      CLUSTER_ID: '6nS2H4XUTT-Fi3OmSsPIyg'
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      
      # --- Network Listener Configuration ---
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://kafka:29093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      
      # --- General Kafka Settings ---
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: 'local-kafka'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:9092'

  #--------------------------------#
  # Centralized Logging Stack (ELK)
  #--------------------------------#
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.2
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.2
    container_name: kibana
    ports:
      - "15601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  #--------------------------------#
  # Databases
  #--------------------------------#
  user_db_postgres:
    image: postgres:16
    container_name: user_db_postgres
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    env_file:
      - ./backend/user-service/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  todo_db_postgres:
    image: postgres:16
    container_name: todo_db_postgres
    volumes:
      - todo_postgres_data:/var/lib/postgresql/data
    env_file:
      - ./backend/todo-service/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  #--------------------------------#
  # Application Backend Services
  #--------------------------------#
  user-service:
    build: ./backend/user-service
    container_name: user_service
    volumes:
      - ./backend/user-service:/app
    env_file:
      - ./backend/user-service/.env
    depends_on:
      user_db_postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  todo-service:
    build: ./backend/todo-service
    container_name: todo_service
    volumes:
      - ./backend/todo-service:/app
    env_file:
      - ./backend/todo-service/.env
    depends_on:
      todo_db_postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  #--------------------------------#
  # Gateway & Frontend
  #--------------------------------#
  api-gateway:
    build: ./backend/api-gateway
    container_name: api_gateway
    ports:
      - "8000:8000"
    env_file:
      - ./backend/api-gateway/.env
    depends_on:
      - user-service
      - todo-service

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway

# Named volumes for data persistence
volumes:
  elasticsearch_data:
  user_postgres_data:
  todo_postgres_data:
